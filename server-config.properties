# Listening port of this HTTP server.
server.port=8080
# Threads count the server should handle at most.
server.thread.max=5
# Not used yet. It's one solution to define accounts and their roles. Format should be <login>:<password>:<role1>,<role2>;<login>:<password>:<role1>
server.auth.accounts=admin:admin:admin
# Relative path on the server the client should prefix to access to static files (*.html, *.js, *.jpg). For example : /static
server.handler.static.files.endpoint.relative.path=/web
# Local path where the server should look for returning static files.
server.handler.static.files.base.directory=./src/main/web
# Properties file name. This is the file where you'd define all these settings. This property isn't useful unless you decide to let this app generate a properties file by itself and you want to define a specific name.
server.config.file=server-config.properties
# Path where the server can find the Java Key Store. This parameter is necessary if you want to enable HTTPS.
# server.key.store.path=<not set by default>
# Password of the Java Key Store. This parameter is necessary if you want to enable HTTPS.
# server.key.store.pwd=<not set by default>
# Javascript file the client would use to call this server's endpoint. This file generated automatically.
server.generate.js.lib.endpoint=/lib.js
# Endpoint developers can call to list all existing endpoints.
server.handler.self.describe.endpoint=/self-describe
# Endpoint path the client should call to authenticate. For example: /authenticate
server.handler.auth.endpoint=/auth
# Local path where the server should look for to stream videos.
# server.handler.video.files.base.directory=<not set by default>
# Log level. Values can be: [FINE, INFO, WARN, ERROR]
log.level=info
# Path and name of the log file.
# log.file=<not set by default>
server.handlers.0.endpoint.class=webserver.example.CommandManager
server.handlers.1.endpoint.class=webserver.example.MyEndpoints
